################################### General ####################################
# New window will start at pwd
# set default-path "$PWD"
################################### Mapping ####################################
# remap C-\ to C-a
set -g prefix 'C-a'
unbind C-b
# bind prefix + a to go to beginning of a line
bind a send-prefix

# reload the conf file on the fly
bind r source-file ~/.tmux.conf \; display 'Reloaded success!'

# quick pane cycling
# double ctrl+a can cycle pane
unbind ^A
bind ^A select-pane -t :.+

# Remap window navigation to vim
# Thanks https://danielmiessler.com/study/tmux/#screen
unbind-key j                    
bind-key j select-pane -D       
unbind-key k                    
bind-key k select-pane -U       
unbind-key h                    
bind-key h select-pane -L       
unbind-key l                    
bind-key l select-pane -R

# Thanks Video from https://www.bilibili.com/video/av8079953
# repeat last shell command on right pane (if it happens to be a shell)
# send the up arrow and enter to that pane (run last shell command)
# switch to last pane, which will be window 0, pane 0 (primary left)
# make sure we are horiontal-even
# redraw vim -- since it gets fucked up in this build when selecting
#	layout programatically. This whole thing assumes vim in the left pane.
bind-key m select-pane -L \; send-keys Up C-m \; last-pane

# I want new window create on current pane's path
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Swap right pane in window 0 with default pane in window 1
# 
# make sure our current window is listed as 0
# create a second window if it doesn't exist
# select our second pane in 0 window
# join that pane to window 1
# select the pane above the one we just moved there
# move that pane to window 0

bind-key e \
	if-shell 'tmux select-window -t :0' '' 'move-window -t :0' \; \
	if-shell 'test $(tmux list-panes | wc -l) -gt 1' '' 'split-window -h' \; \
	if-shell 'tmux select-window -t :1' '' 'new-window' \; \
	select-window -t 0 \; \
	select-pane -t 1 \; \
	join-pane -t 1.0 \; \
	select-pane -U \; \
	join-pane -h -t 0.0 \; \
	last-pane


################################### Mouse ####################################
# who knows what this does, but I can now scoll in a tmux pane
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# Turn on mouse control
set -g mouse on

################################### Visual ####################################
# Colorscheme for vim
set -g default-terminal "screen-256color"

# Status bar customization
# set -g status-utf8 on
set -g status-bg black
set -g status-fg white
set -g status-interval 5 
set -g status-left-length 90
set -g status-right-length 60
set -g status-justify left
set -g status-right '#[fg=Cyan]#S #[fg=white]%a %d %b %R'
source-file ~/.tmux.snapshot
                                                                                                              
# Rename your terminals
set -g set-titles on
set -g set-titles-string '#(whoami)::#h::#(curl ipecho.net/plain;echo)'


##########################  Vi mode copy and paste ############################
# Vim key mode for browse output
set -gw mode-keys vi

# Setting vi keys for copy and paste in tmux
# Use prefix + [ get into selection mode
# v for start visual mode selection, r for rectangle mode selection, y for yank
# If xclip is already installed, copy buffer can save to local clipboard
# prefix + ] or prefix + P for paste buffer
bind P paste-buffer
#bind-key -t vi-copy 'v' begin-selection
#bind -t vi-copy 'r' rectangle-toggle
#bind -t vi-copy y copy-pipe "xclip -sel clip -i"
